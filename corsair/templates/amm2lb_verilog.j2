// Created with Corsair v{{ corsair_ver }}
//
// Avalon-MM to Local Bus bridge
//

{# MACRO #}
{#- vector range for select operations #}
{% macro range(msb, lsb, is_vector=true) %}
    {% if is_vector %}
        {% if msb == lsb %}
[{{ msb }}]
        {%- else %}
[{{ msb }}:{{ lsb }}]
        {%- endif %}
    {%- endif %}
{%- endmacro %}
{#- literal #}
{% macro literal(val, width=1) %}
    {% if width == 1 %}
1'b{{ val }}
    {%- else %}
{{ width}}'h{{ '%x' % val }}
    {%- endif %}
{%- endmacro %}

{#- special literal for all zeros #}
{% macro zeros(width=1) %}
    {% if width == 1 %}
1'b0
    {%- else %}
{{ width }}'h0
    {%- endif %}
{%- endmacro %}

{#- special literal for all ones #}
{% macro ones(width=1) %}
    {% if width == 1 %}
1'b1
    {%- else %}
{{ "{%d{1'b1}}" % width }}
    {%- endif %}
{%- endmacro %}

{% macro range_decl(msb, is_vector=true) %}
    {% if is_vector %}
[{{ msb }}:0]
    {%- endif %}
{%- endmacro %}

{#- 'always' header with reset logic #}
{% macro always_begin(sig='', width=1, init=0) %}
    {% set rst_type = config['register_reset']%}
    {% if rst_type == 'sync_pos' %}
always @(posedge clk) begin
    if (rst) begin
    {% elif rst_type == 'sync_neg' %}
always @(posedge clk) begin
    if (!rst) begin
    {% elif rst_type == 'async_pos' %}
always @(posedge clk or posedge rst) begin
    if (rst) begin
    {% elif rst_type == 'async_neg' %}
always @(posedge clk or negedge rst) begin
    if (!rst) begin
    {% endif %}
        {{ sig }} <= {{ literal(init, width) }};
    end else
{%- endmacro %}


module {{ module_name }} #(
    parameter ADDR_W = {{ config['address_width'] }},
    parameter DATA_W = {{ config['data_width'] }},
    parameter STRB_W = DATA_W / 8
)(
    input clk,
    input rst,
    // Local Bus
    input                     wready,
    output       [ADDR_W-1:0] waddr,
    output       [DATA_W-1:0] wdata,
    output                    wen,
    output       [STRB_W-1:0] wstrb,
    input        [DATA_W-1:0] rdata,
    input                     rvalid,
    output       [ADDR_W-1:0] raddr,
    output                    ren,
{% macro amm_core(regmap_embed=False) %}
    // Avalon-MM
    input  [ADDR_W-1:0]  address,
    input                read,
    output [DATA_W-1:0]  readdata,
    output               readdatavalid,
    input  [STRB_W-1:0]  byteenable,
    input                write,
    input  [DATA_W-1:0]  writedata,
    output               waitrequest
);
{% if regmap_embed %}
wire              wready;
wire [ADDR_W-1:0] waddr;
wire [DATA_W-1:0] wdata;
wire              wen;
wire [STRB_W-1:0] wstrb;
wire [DATA_W-1:0] rdata;
wire              rvalid;
wire [ADDR_W-1:0] raddr;
wire              ren;
{% endif %}

  assign waddr = address,
         raddr = address;

  assign waitrequest   = ~wready;
  assign readdatavalid = rvalid;

  assign wdata    = writedata,
         readdata = rdata;

  assign wen = write;

  assign wstrb = byteenable;
  reg ren_int;
  {% set rst_type = config['register_reset']%}
  {%- if rst_type == 'async_pos' or rst_type == 'sync_pos' %}
      {% set rst_active = 1%}
  {%- elif rst_type == 'async_neg' or rst_type == 'sync_neg' %}
      {% set rst_active = 0%}
  {%- endif %}
  always @(posedge clk
  {%- if rst_type == 'async_pos' %} or posedge rst)
  {%- elif rst_type == 'async_neg' %} or negedge rst)
  {%- else -%} ) {%- endif %} begin
    if (rst == 1'b{{ rst_active }})
      ren_int <= 1'b0;
    else
    begin
      if (read)
        ren_int <= 1'b1;
      else
        if (rvalid)
          ren_int <= 1'b0;
    end
  end

  reg {{ range_decl(config['address_width'] - 1) }} raddr_int;
  {{ always_begin(sig='raddr_int', width=config['address_width'], init=0
  )}} if (read) begin
        raddr_int <= address;
      end
  end

  assign ren = ren_int;
{% endmacro %}
{{ amm_core() }}
endmodule
